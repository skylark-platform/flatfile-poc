import { NonEmptyArray } from './_types';
/**
 * Gets the last element of `array`.
 * Note: In `pipe`, use `last()` form instead of `last`. Otherwise, the inferred type is lost.
 * @param array the array
 * @signature
 *    R.last(array)
 * @example
 *    R.last([1, 2, 3]) // => 3
 *    R.last([]) // => undefined
 *    R.pipe(
 *      [1, 2, 4, 8, 16],
 *      R.filter(x => x > 3),
 *      R.last(),
 *      x => x + 1
 *    ); // => 17
 *
 * @category Array
 * @pipeable
 */
export declare function last<T>(array: NonEmptyArray<T>): T;
export declare function last<T>(array: ReadonlyArray<T>): T | undefined;
export declare function last<T>(): (array: ReadonlyArray<T>) => T | undefined;
export declare namespace last {
    function lazy<T>(): (value: T) => {
        done: boolean;
        hasNext: boolean;
        next: T;
    };
    namespace lazy {
        const single = true;
    }
}
//# sourceMappingURL=last.d.ts.map