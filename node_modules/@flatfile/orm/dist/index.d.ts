declare class RecordMutation {
    private $edits;
    private $info;
    /**
     * Reference to the Flatfile internal ID of the record in the sheet
     */
    readonly recordId: number;
    constructor(recordOrId: FlatfileRecord | number);
    /**
     * Modify the value of a field
     *
     * @param field
     * @param value
     */
    set(field: string, value: TPrimitive): this;
    /**
     * Add an info message to the mutation
     *
     * @param fields
     * @param message
     */
    addInfo(fields: string | string[], message: string): this;
    /**
     * Add an info message to the mutation
     *
     * @alias addInfo
     * @param fields
     * @param message
     */
    addComment(fields: string | string[], message: string): this;
    /**
     * Add an error message to the mutation
     *
     * @param fields
     * @param message
     */
    addError(fields: string | string[], message: string): this;
    /**
     * Add a warning message
     *
     * @param fields
     * @param message
     */
    addWarning(fields: string | string[], message: string): this;
    /**
     * Add any type of message to one or more fields.
     *
     * @param fields
     * @param message
     * @param level
     */
    addMessage(fields: string | string[], message: string, level: IRecordInfo['level']): this;
    /**
     * Return the payload needed for the GraphQL endpoint
     * @note yes, this endpoint does indeed use entirely different structure for both messages and ids than others
     */
    toGraphQLEdits(): {
        _id: number;
        data: Record<string, TPrimitive>;
        messages: Record<string, string>[];
    };
}

declare class FlatfileRecord {
    private $raw;
    readonly data: TRecordData;
    readonly recordId: number;
    private readonly $info;
    constructor($raw: IRowResponse);
    get valid(): boolean;
    get status(): ERecordStatus;
    get allMessages(): IRecordMessage[];
    get errors(): IRecordMessage[];
    get warnings(): IRecordMessage[];
    get info(): IRecordMessage[];
    getMutation(): RecordMutation;
}
declare type TPrimitive = string | boolean | number | null;
declare type TRecordData<T extends TPrimitive | undefined = TPrimitive> = {
    [key: string]: T;
};
declare enum ELevel {
    ERROR = "error",
    WARN = "warn",
    INFO = "info"
}
interface IRecordInfo<L extends ELevel = ELevel> {
    level: L;
    key: string;
    message: string;
}
interface IRecordMessage<L extends ELevel = ELevel> {
    level: L;
    field: string;
    message: string;
}
declare enum ERecordStatus {
    REVIEW = "review",
    DISMISSED = "dismissed",
    ACCEPTED = "accepted"
}
interface IRowResponse {
    id: number;
    valid: boolean;
    status: ERecordStatus;
    data: TRecordData;
    info: {
        level: ELevel;
        key: string;
        message: string;
    }[];
}

declare class RecordError extends RecordMutation {
    constructor(recordOrId: FlatfileRecord | number, errors: {
        field: string;
        message: string;
    }[]);
}

declare const DATA_RECORD_BASIC: IRowResponse;

export { DATA_RECORD_BASIC, ELevel, ERecordStatus, FlatfileRecord, IRecordInfo, IRecordMessage, IRowResponse, RecordError, RecordMutation, TPrimitive, TRecordData };
