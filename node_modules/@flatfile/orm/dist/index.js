"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DATA_RECORD_BASIC: () => DATA_RECORD_BASIC,
  ELevel: () => ELevel,
  ERecordStatus: () => ERecordStatus,
  FlatfileRecord: () => FlatfileRecord,
  RecordError: () => RecordError,
  RecordMutation: () => RecordMutation
});
module.exports = __toCommonJS(src_exports);

// src/RecordMutation.ts
var RecordMutation = class {
  constructor(recordOrId) {
    this.$edits = {};
    this.$info = [];
    if (recordOrId instanceof FlatfileRecord) {
      this.recordId = recordOrId.recordId;
    } else {
      this.recordId = recordOrId;
    }
  }
  set(field, value) {
    this.$edits[field] = value;
    return this;
  }
  addInfo(fields, message) {
    return this.addMessage(fields, message, "info" /* INFO */);
  }
  addComment(fields, message) {
    return this.addInfo(fields, message);
  }
  addError(fields, message) {
    return this.addMessage(fields, message, "error" /* ERROR */);
  }
  addWarning(fields, message) {
    return this.addMessage(fields, message, "warn" /* WARN */);
  }
  addMessage(fields, message, level) {
    fields = Array.isArray(fields) ? fields : [fields];
    fields.forEach((key) => {
      this.$info.push({
        key,
        message,
        level
      });
    });
    return this;
  }
  toGraphQLEdits() {
    return {
      _id: this.recordId,
      data: this.$edits,
      messages: this.$info.map((i) => ({ error: i.level, key: i.key, message: i.message }))
    };
  }
};

// src/FlatfileRecord.ts
var FlatfileRecord = class {
  constructor($raw) {
    this.$raw = $raw;
    this.data = $raw.data;
    this.recordId = $raw.id;
    this.$info = this.$raw.info.map((i) => ({
      level: i.level,
      field: i.key,
      message: i.message
    }));
  }
  get valid() {
    return this.$raw.valid;
  }
  get status() {
    return this.$raw.status;
  }
  get allMessages() {
    return this.$info;
  }
  get errors() {
    return this.$info.filter((m) => m.level === ELevel.ERROR);
  }
  get warnings() {
    return this.$info.filter((m) => m.level === ELevel.WARN);
  }
  get info() {
    return this.$info.filter((m) => m.level === ELevel.INFO);
  }
  getMutation() {
    return new RecordMutation(this);
  }
};
var ELevel = /* @__PURE__ */ ((ELevel2) => {
  ELevel2["ERROR"] = "error";
  ELevel2["WARN"] = "warn";
  ELevel2["INFO"] = "info";
  return ELevel2;
})(ELevel || {});
var ERecordStatus = /* @__PURE__ */ ((ERecordStatus2) => {
  ERecordStatus2["REVIEW"] = "review";
  ERecordStatus2["DISMISSED"] = "dismissed";
  ERecordStatus2["ACCEPTED"] = "accepted";
  return ERecordStatus2;
})(ERecordStatus || {});

// src/RecordError.ts
var RecordError = class extends RecordMutation {
  constructor(recordOrId, errors) {
    super(recordOrId);
    errors.forEach((e) => {
      this.addError(e.field, e.message);
    });
  }
};

// src/data/basic.ts
var DATA_RECORD_BASIC = {
  id: 9,
  valid: true,
  status: "review" /* REVIEW */,
  data: {
    full_name: "John Doe",
    email: "john@doe.com",
    zip_code: "2121"
  },
  info: [
    {
      level: "info" /* INFO */,
      key: "full_name",
      message: "That's a cool name, John"
    },
    {
      level: "warn" /* WARN */,
      key: "email",
      message: "That email looks kinda fake"
    },
    {
      level: "error" /* ERROR */,
      key: "zip_code",
      message: "Not a real zip code"
    }
  ]
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DATA_RECORD_BASIC,
  ELevel,
  ERecordStatus,
  FlatfileRecord,
  RecordError,
  RecordMutation
});
