import { FlatfileError } from './errors/FlatfileError';
import { ApiService } from './graphql/ApiService';
import { IChunkOptions, ImportSession, IUrlOptions } from './importer/ImportSession';
import { IteratorCallback } from './lib/RecordChunkIterator';
import { TypedEventManager } from './lib/TypedEventManager';
import { UIService } from './service/UIService';
import { IEvents, IFlatfileConfig, IFlatfileImporterConfig, IImportSessionConfig, IRawToken, JsonWebToken } from './types';
export declare class Flatfile extends TypedEventManager<IEvents> {
    /**
     * The configuration of this instance of Flatfile with defaults merged in
     */
    readonly config: IFlatfileConfig;
    /**
     * Reference to a pre-authenticated instance of the API service
     */
    api?: ApiService;
    ui: UIService;
    constructor(config: IFlatfileImporterConfig);
    constructor(token: string, config: IFlatfileImporterConfig);
    /**
     * Returns / resolves a token or generates a JWT from embedId, user & org
     */
    token(): Promise<JsonWebToken>;
    private extractToken;
    /**
     * Creates a new pre-authenticated instance of the API service
     */
    private initApi;
    /**
     * Start a new import or resume the one that's currently in progress
     */
    startOrResumeImportSession(options?: IOpenOptions & IChunkOptions & IImportSessionConfig): Promise<ImportSession>;
    /**
     * Simple function that abstracts away some of the complexity for a single line call
     * also provides some level of backwards compatability
     */
    requestDataFromUser(): Promise<{
        close: () => void;
    }>;
    requestDataFromUser(opts: DataReqOptions): Promise<{
        close: () => void;
    }>;
    requestDataFromUser(cb: IteratorCallback, opts?: DataReqOptions): Promise<{
        close: () => void;
    }>;
    handleError(error: FlatfileError): void;
    /**
     * Generate a token that only works for an embed development mode.
     * This keeps the "hello world" effort very low but doesn't impact security.
     *
     * @param embedId
     * @param body The raw payload for a normal signed token
     * @param key
     * @private
     */
    static getDevelopmentToken(embedId: string, body?: IRawToken, key?: string): Promise<JsonWebToken>;
    static requestDataFromUser(options?: DataReqOptions & IFlatfileImporterConfig): Promise<{
        close: () => void;
    }>;
    static extractImporterOptions(options: DataReqOptions & IFlatfileImporterConfig): {
        sessionConfig: DataReqOptions;
        importerConfig: IFlatfileImporterConfig;
    };
    /**
     * Merge in any user provided configuration with defaults.
     *
     * @param config User provided configuration
     * @private
     */
    private mergeConfigDefaults;
}
export declare const SESSION_CONFIG_KEYS: (keyof DataReqOptions)[];
export declare const IMPORTER_CONFIG_KEYS: (keyof IFlatfileImporterConfig)[];
declare type IOpenOptions = {
    open?: 'iframe' | 'window';
    mountOn?: string;
} & IUrlOptions;
declare type DataReqOptions = IOpenOptions & IChunkOptions & IImportSessionConfig;
export declare type DataRequestConfig = DataReqOptions & IFlatfileImporterConfig;
export {};
