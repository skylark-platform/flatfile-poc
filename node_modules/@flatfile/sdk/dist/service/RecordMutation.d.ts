import { FlatfileRecord, IRecordInfo, TPrimitive } from './FlatfileRecord';
export declare class RecordMutation {
    private $edits;
    private $info;
    /**
     * Reference to the Flatfile internal ID of the record in the sheet
     */
    readonly recordId: number;
    constructor(recordOrId: FlatfileRecord | number);
    /**
     * Modify the value of a field
     *
     * @param field
     * @param value
     */
    set(field: string, value: TPrimitive): this;
    /**
     * Add an info message to the mutation
     *
     * @param fields
     * @param message
     */
    addInfo(fields: string | string[], message: string): this;
    /**
     * Add an info message to the mutation
     *
     * @alias addInfo
     * @param fields
     * @param message
     */
    addComment(fields: string | string[], message: string): this;
    /**
     * Add an error message to the mutation
     *
     * @param fields
     * @param message
     */
    addError(fields: string | string[], message: string): this;
    /**
     * Add a warning message
     *
     * @param fields
     * @param message
     */
    addWarning(fields: string | string[], message: string): this;
    /**
     * Add any type of message to one or more fields.
     *
     * @param fields
     * @param message
     * @param level
     */
    addMessage(fields: string | string[], message: string, level: IRecordInfo['level']): this;
    /**
     * Return the payload needed for the GraphQL endpoint
     * @note yes, this endpoint does indeed use entirely different structure for both messages and ids than others
     */
    toGraphQLEdits(): {
        _id: number;
        data: Record<string, TPrimitive>;
        messages: Record<string, string>[];
    };
}
