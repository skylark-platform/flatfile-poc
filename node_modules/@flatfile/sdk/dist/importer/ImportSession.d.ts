import { Flatfile } from '../Flatfile';
import { ApiService } from '../graphql/ApiService';
import { GetFinalDatabaseViewResponse } from '../graphql/queries/GET_FINAL_DATABASE_VIEW';
import { IteratorCallback, RecordChunkIterator } from '../lib/RecordChunkIterator';
import { TypedEventManager } from '../lib/TypedEventManager';
import { TPrimitive } from '../service/FlatfileRecord';
import { UIService } from '../service/UIService';
import { ITheme } from '../types';
import { ImportFrame } from './ImportFrame';
export declare class ImportSession extends TypedEventManager<IImportSessionEvents> {
    flatfile: Flatfile;
    meta: IImportMeta;
    ui: UIService;
    api: ApiService;
    private $iframe?;
    constructor(flatfile: Flatfile, meta: IImportMeta);
    get batchId(): string;
    get workbookId(): string | undefined;
    get schemaId(): number;
    init(): IImportMeta;
    get synced(): boolean | undefined;
    /**
     * Open the importer in an iframe (recommended)
     * todo: move launch event out of iframe helper
     */
    openInEmbeddedIframe(options?: IUrlOptions, mountingPoint?: string): ImportFrame;
    /**
     * Open the import in a new window and listen for data
     */
    openInNewWindow(options?: IUrlOptions): Window;
    /**
     * Returns the iframe helper, useful in more advanced implementations
     */
    get iframe(): ImportFrame;
    /**
     * Update the environment with unsigned values
     * @param env
     */
    updateEnvironment(env: Record<string, TPrimitive>): Promise<{
        success: boolean;
    }>;
    /**
     * Chunk and handle data response
     * @param cb
     * @param options
     */
    processPendingRecords(cb: IteratorCallback, options?: IChunkOptions): Promise<RecordChunkIterator>;
    private subscribeToBatchStatus;
    /**
     * Get the URL necessary to load the importer and manipulate the data
     * @todo fix the fact that the JWT is sent in raw query params
     */
    signedImportUrl(options?: IUrlOptions): string;
    /**
     * Close the importer iframe
     * @todo: kill batch status subscription
     */
    close(): void;
}
export interface IImportSessionEvents {
    init: {
        session: ImportSession;
        meta: IImportMeta;
    };
    upload: {
        uploadId: string;
    };
    error: {
        error: Error;
    };
    /** @deprecated */
    launch: {
        batchId: string;
    };
    submit: ImportSession;
    complete: {
        batchId: string;
        data: (sample?: boolean) => Promise<GetFinalDatabaseViewResponse['getFinalDatabaseView']>;
    };
    evaluate: ImportSession;
    close: void;
}
export interface IImportMeta {
    batchId: string;
    mountUrl?: string;
    workspaceId: string;
    workbookId?: string;
    schemaIds: string[];
    synced?: boolean;
}
export interface IChunkOptions {
    chunkSize?: number;
    chunkTimeout?: number;
}
export interface IUrlOptions {
    theme?: ITheme;
    autoContinue?: boolean;
    customFields?: ICustomField[];
}
export interface ICustomField {
    field: string;
    type: 'string';
    label: string;
}
