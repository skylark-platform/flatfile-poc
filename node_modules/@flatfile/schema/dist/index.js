"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  SchemaILToJsonSchema: () => SchemaILToJsonSchema,
  compileEnum: () => compileEnum,
  compileToJsonSchema: () => compileToJsonSchema
});
module.exports = __toCommonJS(src_exports);

// src/convert.ts
var import_remeda = require("remeda");
var compileEnum = (inputField) => {
  if (inputField.type !== "enum") {
    return inputField;
  }
  return {
    type: "string",
    label: inputField.label,
    ...inputField.required ? { required: inputField.required } : {},
    enum: (0, import_remeda.map)(Object.keys(inputField.labelEnum), (key) => key),
    enumLabel: (0, import_remeda.map)(Object.values(inputField.labelEnum), (key) => key)
  };
};
var SchemaILToJsonSchema = (ddl) => {
  const fields = (0, import_remeda.pipe)(ddl.fields, (0, import_remeda.mapValues)((value, field) => ({
    field,
    ...compileEnum(value)
  })), import_remeda.values);
  const required = (0, import_remeda.pipe)(fields, (0, import_remeda.filter)((f) => (0, import_remeda.isTruthy)(f.required)), (0, import_remeda.map)((f) => f.field));
  const unique = (0, import_remeda.pipe)(fields, (0, import_remeda.filter)((f) => (0, import_remeda.isTruthy)(f.unique)), (0, import_remeda.map)((f) => f.field));
  const pks = (0, import_remeda.pipe)(fields, (0, import_remeda.filter)((f) => (0, import_remeda.isTruthy)(f.primary)), (0, import_remeda.map)((f) => f.field));
  const properties = (0, import_remeda.pipe)(fields, (0, import_remeda.map)((f) => tuple(f.field, {
    ...(0, import_remeda.pick)(f, [
      "type",
      "label",
      "field",
      "enum",
      "enumLabel",
      "description"
    ]),
    visibility: f.stageVisibility,
    ...f.type === "schema_ref" ? { $schemaId: f.sheetName } : {}
  })), (v) => (0, import_remeda.fromPairs)(v));
  return {
    properties,
    type: "object",
    required,
    unique,
    primary: pks[0],
    allowCustomFields: ddl.allowCustomFields
  };
};
var compileToJsonSchema = SchemaILToJsonSchema;
function tuple(a, b) {
  return [a, b];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SchemaILToJsonSchema,
  compileEnum,
  compileToJsonSchema
});
