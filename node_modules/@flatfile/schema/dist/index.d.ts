interface IJsonSchemaProperty {
    title?: string;
    description?: string;
    enum?: string[];
    enumArray?: {
        label: string;
        value: string;
    }[];
    enumLabel?: string[];
    enumLabelArray?: string[];
    field?: string;
    format?: string;
    isMultiple?: boolean;
    items?: {
        type: string | string[];
        enum?: {
            label: string;
            value: string;
        }[];
        enumLabel?: string[];
        pattern?: string;
        format?: string;
    };
    label: string;
    minimum?: number;
    maximum?: number;
    regexp?: {
        cache?: RegExp;
        pattern: string;
        flags: string;
        ignoreBlanks?: boolean;
    };
    required?: boolean;
    type: string | string[];
    exportDateFormat?: string;
    unique?: boolean;
    pattern?: string;
    primary?: boolean;
    $schemaId?: string;
    default?: string;
    custom?: boolean;
    visibility?: FieldVisibilityTypes;
}
declare type FieldVisibilityTypes = {
    mapping?: boolean;
    review?: boolean;
    export?: boolean;
};
interface IJsonSchema {
    properties: Record<string, IJsonSchemaProperty>;
    type: string;
    name?: string;
    required?: string[];
    unique?: string[];
    primary?: string;
    linkedProperties?: Record<string, IJsonSchemaProperty>;
    allowCustomFields?: boolean;
}

declare type BaseFieldTypes = 'string' | 'number' | 'boolean' | 'composite';
interface BaseField {
    label: string;
    field: string;
    description?: string;
    required?: boolean;
    primary?: boolean;
    unique?: boolean;
    stageVisibility?: FieldVisibilityTypes;
    annotations: {
        default?: boolean;
        defaultMessage?: string;
        compute?: boolean;
        computeMessage?: string;
    };
}
interface BaseSchemaILField extends BaseField {
    type: BaseFieldTypes;
}
interface SchemaILEnumField extends BaseField {
    type: 'enum';
    labelEnum: Record<string, string>;
}
interface LinkedSheetField extends BaseField {
    type: 'schema_ref';
    sheetName: string;
}
declare type SchemaILField = BaseSchemaILField | SchemaILEnumField | LinkedSheetField;
interface SchemaILModel<Fields extends Record<string, SchemaILField> = Record<string, SchemaILField>> {
    name: string;
    slug: string;
    namespace: string;
    fields: Fields;
    required?: Array<keyof Fields | Array<keyof Fields>>;
    unique?: Array<keyof Fields | Array<keyof Fields>>;
    primary?: keyof Fields;
    allowCustomFields: boolean;
}

declare const compileEnum: (inputField: SchemaILField) => IJsonSchemaProperty;
declare const SchemaILToJsonSchema: (ddl: SchemaILModel) => IJsonSchema;
declare const compileToJsonSchema: (ddl: SchemaILModel) => IJsonSchema;

export { BaseFieldTypes, BaseSchemaILField, FieldVisibilityTypes, IJsonSchema, IJsonSchemaProperty, LinkedSheetField, SchemaILEnumField, SchemaILField, SchemaILModel, SchemaILToJsonSchema, compileEnum, compileToJsonSchema };
